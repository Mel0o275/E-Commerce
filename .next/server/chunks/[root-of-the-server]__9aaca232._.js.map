{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///D:/Route/Front-end/React/e-commerce-app/e-commerce/src/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n    pages: {\r\n        signIn: \"/login\"\r\n    },\r\n    providers: [\r\n        Credentials({\r\n            name: \"Credentials\",\r\n            credentials: {\r\n                email: {},\r\n                password: {}\r\n            },\r\n            authorize: async (credentials) => {\r\n                let res = await fetch(`${process.env.API}/auth/signin`, {\r\n                    method: \"POST\",\r\n                    body: JSON.stringify({\r\n                        email: credentials?.email,\r\n                        password: credentials?.password\r\n                    }),\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                }\r\n                );\r\n                let payload = await res.json();\r\n                console.log(payload);\r\n\r\n\r\n                if (payload.message === \"success\") {\r\n                    const decoded: { id: string } = jwtDecode(payload.token);\r\n                    console.log(decoded);\r\n\r\n                    return {\r\n                        id: decoded.id,\r\n                        user: payload.user,\r\n                        token: payload.token,\r\n                    };\r\n                }\r\n\r\n                else {\r\n                    throw new Error(payload.message || \"Invalid credentials\");\r\n                }\r\n                // return null;\r\n\r\n            },\r\n        }),\r\n    ],\r\n\r\n    callbacks: {\r\n        async jwt({ token, user }) {\r\n          if (user) {\r\n            token.user = {\r\n              name: user.user.name,\r\n              email: user.user.email,\r\n              role: user.user.role,\r\n            };\r\n            token.token = user.token;\r\n            token.sub = user.id; // الـ id من الـ JWT\r\n          }\r\n          return token;\r\n        },\r\n      \r\n        async session({ session, token }) {\r\n          if (session.user) {\r\n            session.user.id = token.sub as string;\r\n            session.user.name = token.user?.name || \"\";\r\n            session.user.email = token.user?.email || \"\";\r\n            session.user.role = token.user?.role || \"user\";\r\n          }\r\n          return session;\r\n        },\r\n      }\r\n      \r\n}"],"names":[],"mappings":";;;;AACA;AACA;;;AAEO,MAAM,cAA+B;IACxC,OAAO;QACH,QAAQ;IACZ;IACA,WAAW;QACP,IAAA,qKAAW,EAAC;YACR,MAAM;YACN,aAAa;gBACT,OAAO,CAAC;gBACR,UAAU,CAAC;YACf;YACA,WAAW,OAAO;gBACd,IAAI,MAAM,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;oBACpD,QAAQ;oBACR,MAAM,KAAK,SAAS,CAAC;wBACjB,OAAO,aAAa;wBACpB,UAAU,aAAa;oBAC3B;oBACA,SAAS;wBACL,gBAAgB;oBACpB;gBACJ;gBAEA,IAAI,UAAU,MAAM,IAAI,IAAI;gBAC5B,QAAQ,GAAG,CAAC;gBAGZ,IAAI,QAAQ,OAAO,KAAK,WAAW;oBAC/B,MAAM,UAA0B,IAAA,qKAAS,EAAC,QAAQ,KAAK;oBACvD,QAAQ,GAAG,CAAC;oBAEZ,OAAO;wBACH,IAAI,QAAQ,EAAE;wBACd,MAAM,QAAQ,IAAI;wBAClB,OAAO,QAAQ,KAAK;oBACxB;gBACJ,OAEK;oBACD,MAAM,IAAI,MAAM,QAAQ,OAAO,IAAI;gBACvC;YACA,eAAe;YAEnB;QACJ;KACH;IAED,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG;oBACX,MAAM,KAAK,IAAI,CAAC,IAAI;oBACpB,OAAO,KAAK,IAAI,CAAC,KAAK;oBACtB,MAAM,KAAK,IAAI,CAAC,IAAI;gBACtB;gBACA,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,GAAG,GAAG,KAAK,EAAE,EAAE,oBAAoB;YAC3C;YACA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,EAAE,QAAQ;gBACxC,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,EAAE,SAAS;gBAC1C,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,EAAE,QAAQ;YAC1C;YACA,OAAO;QACT;IACF;AAEN","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///D:/Route/Front-end/React/e-commerce-app/e-commerce/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport {authOptions} from \"@/auth\";\r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,4HAAW","debugId":null}}]
}