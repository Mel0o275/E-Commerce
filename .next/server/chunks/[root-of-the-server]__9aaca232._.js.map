{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///D:/Route/Front-end/React/e-commerce-app/e-commerce/src/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n  providers: [\r\n    Credentials({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        const res = await fetch(`${process.env.API}/auth/signin`, {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            email: credentials?.email,\r\n            password: credentials?.password,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n\r\n        const payload = await res.json();\r\n        console.log(\"API Response:\", payload);\r\n\r\n        if (payload.message === \"success\") {\r\n          const decoded: { id: string } = jwtDecode(payload.token);\r\n          console.log(\"Decoded JWT:\", decoded);\r\n\r\n          return {\r\n            id: decoded.id,\r\n            name: payload.user.name,\r\n            email: payload.user.email,\r\n            role: payload.user.role, // ✅ include role\r\n            token: payload.token,\r\n          };\r\n        }\r\n\r\n        throw new Error(payload.message || \"Invalid credentials\");\r\n      },\r\n    }),\r\n  ],\r\n\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.user = {\r\n          id: user.id,\r\n          name: user.name,\r\n          email: user.email,\r\n          role: user.role, // ✅ carry role into token\r\n        };\r\n        token.token = user.token;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      session.user = token.user as {\r\n        id: string;\r\n        name: string;\r\n        email: string;\r\n        role: string;\r\n      };\r\n      session.accessToken = token.token as string;\r\n      return session;\r\n    },\r\n  },\r\n};\r\n"],"names":[],"mappings":";;;;AACA;AACA;;;AAEO,MAAM,cAA+B;IAC1C,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,IAAA,qKAAW,EAAC;YACV,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,MAAM,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;oBACxD,QAAQ;oBACR,MAAM,KAAK,SAAS,CAAC;wBACnB,OAAO,aAAa;wBACpB,UAAU,aAAa;oBACzB;oBACA,SAAS;wBACP,gBAAgB;oBAClB;gBACF;gBAEA,MAAM,UAAU,MAAM,IAAI,IAAI;gBAC9B,QAAQ,GAAG,CAAC,iBAAiB;gBAE7B,IAAI,QAAQ,OAAO,KAAK,WAAW;oBACjC,MAAM,UAA0B,IAAA,qKAAS,EAAC,QAAQ,KAAK;oBACvD,QAAQ,GAAG,CAAC,gBAAgB;oBAE5B,OAAO;wBACL,IAAI,QAAQ,EAAE;wBACd,MAAM,QAAQ,IAAI,CAAC,IAAI;wBACvB,OAAO,QAAQ,IAAI,CAAC,KAAK;wBACzB,MAAM,QAAQ,IAAI,CAAC,IAAI;wBACvB,OAAO,QAAQ,KAAK;oBACtB;gBACF;gBAEA,MAAM,IAAI,MAAM,QAAQ,OAAO,IAAI;YACrC;QACF;KACD;IAED,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG;oBACX,IAAI,KAAK,EAAE;oBACX,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;gBACA,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,GAAG,MAAM,IAAI;YAMzB,QAAQ,WAAW,GAAG,MAAM,KAAK;YACjC,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///D:/Route/Front-end/React/e-commerce-app/e-commerce/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport {authOptions} from \"@/auth\";\r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,4HAAW","debugId":null}}]
}